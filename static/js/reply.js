// Generated by CoffeeScript 1.8.0
(function() {
  var $$reply, _reply_pusher;

  $$reply = $import("/rpc/reply");

  _reply_pusher = function(old_li, new_li, user_dict) {
    var can_rm, i, ico, id, last, name, rid, rmer, t, time, txt, user_id, _i, _len, _ref;
    for (_i = 0, _len = new_li.length; _i < _len; _i++) {
      i = new_li[_i];
      id = i[0], user_id = i[1], time = i[2], txt = i[3], rid = i[4], rmer = i[5], can_rm = i[6];
      last = old_li[old_li.length - 1];
      if (last && rid === last[0].id) {
        t = last;
      } else {
        t = [];
        old_li.push(t);
      }
      _ref = user_dict[user_id], name = _ref[0], ico = _ref[1];
      t.push({
        id: id,
        time: time,
        user: {
          id: user_id,
          ico: ico,
          name: name
        },
        txt: txt,
        can_rm: can_rm,
        rmer: rmer
      });
    }
    return old_li;
  };

  avalon.ui.reply = function(element, data, vmodels) {
    var height, model, opt, po_id, view;
    opt = data.replyOptions;
    po_id = opt.id;
    view = "reply" + po_id;
    height = devicePixelRatio * 56;
    model = avalon.define(view, function(v) {
      var replying_by;
      v.$init = function() {
        return avalon.nextTick(function() {
          element.innerHTML = "<div ms_view=\"" + view + "\">\n    <div class=\"reply-list\" ms_class=\"loading:!live\"><div ms_repeat_i=\"reply_list\"><div class=\"L1\">\n<div class=\"content\" ms_repeat=\"i\">\n    <a ms_if=\"!el.user.ico\" href=\"javascript:void(0)\" class=\"owner\" ms_attr_rel=\"{{el.user.id}}\"></a>\n    <a ms_if=\"el.user.ico\" ms_css_background_image=\"url(" + CONST.SSO.QINIU + "/{{el.user.ico}}?imageView2/5/w/" + height + "/h/" + height + ")\" href=\"javascript:void(0)\" class=\"owner\" ms_attr_rel=\"{{el.user.id}}\"></a>\n    <span ms_click=\"rm(el)\" class=\"reply_rm\" ms_if=\"el.can_rm&&!el.rmer\">+</span>\n\n    <a ms_if=\"$first\" href=\"javascript:void(0)\" class=\"reply_a\" ms_click=\"reply_show(el,i)\">{{$outer.$index+1}}</a>\n    <a ms_if=\"!$first\" href=\"javascript:void(0)\" class=\"reply_ico\" ms_click=\"reply_show(el,i)\"></a>\n    <div class=\"box\">\n    <div class=\"time\"><a href=\"javascript:void(0)\">{{el.user.name}}</a><span>{{$.isotime(el.time)}}</span></div>\n    <pre class=\"L1pre\" ms_if=\"!el.rmer\">{{el.txt}}</pre>\n    <pre class=\"L1pre c9\" ms_if=\"el.rmer\">内容被 <a href=\"javascript:void(0);\" class=\"ssoTip\" rel=\"{{el.rmer[0]}}\">{{el.rmer[1]}}</a> 删除</pre>\n    </div>\n</div>\n<form ms_if=\"i[0].id==replying\"  class=\"reply L1reply\" ms_submit=\"submit(i)\">\n    <div class=\"textarea-box c\">\n        <textarea ms_duplex=\"reply\" ms_class=\"reply{{i[0].id}}\"></textarea>\n        <button type=\"submit\" class=\"button\">回复</button>\n        <span class=\"key\">CTRL+ENTER 快速发布</span>\n    </div>\n</form>\n    </div></div></div>\n    <div class=\"reply0 reply\">\n        <form class=\"textarea-box c\" ms_submit=\"submit(0)\">\n            <textarea ms_duplex=\"reply0\" id=\"reply0_" + po_id + "\"></textarea>\n            <button type=\"submit\" class=\"button\">发表评论</button>\n            <span class=\"key\">CTRL+ENTER 快速发布</span>\n        </form>\n    </div>\n</div>";
          return avalon.scan(element, [model].concat(vmodels));
        });
      };
      v.id = po_id;
      v.reply_list = [];
      v.replying = 0;
      replying_by = 0;
      v.reply = '';
      v.reply0 = '';
      v.live = 0;
      v.rm = function(el) {
        return $$reply("rm", el.id, function(name) {
          return el.rmer = [$.current_user_id, name];
        });
      };
      v.submit = function(el) {
        var name, t, txt, _;
        if ($.login()) {
          if (el) {
            _ = "";
            replying_by = 0;
            v.replying = 0;
          } else {
            _ = 0;
          }
          name = 'reply' + _;
          txt = v[name];
          if (txt) {
            txt = txt.trimRight();
          }
          if (txt) {
            v[name] = '';
            if (el) {
              t = el;
            } else {
              t = [];
            }
            $$reply("new", [po_id, el && el[el.length - 1].id || 0, txt], function(name, ico, reply_id) {
              t.push({
                id: reply_id,
                time: (new Date()).getTime() / 1000,
                txt: txt,
                user: {
                  ico: ico,
                  id: $.current_user_id,
                  name: name
                },
                can_rm: 1,
                rmer: 0
              });
              if (!el) {
                return v.reply_list.push(t);
              }
            });
          }
        }
        return false;
      };
      setTimeout(function() {
        var reply0txt;
        reply0txt = $("#reply0_" + po_id);
        reply0txt.autosize();
        reply0txt.ctrl_enter(function() {
          return v.submit();
        });
        reply0txt.focus(function() {
          return $.login();
        });
        return $$reply("by_po_id", po_id, function(user_dict, reply_list) {
          model.live = 1;
          return model.reply_list = _reply_pusher([], reply_list, user_dict);
        });
      }, 300);
      return v.reply_show = function(el, li) {
        var id;
        if ($.login()) {
          id = li[0].id;
          if (v.replying === id && replying_by === el.id) {
            v.replying = 0;
            return replying_by = 0;
          } else {
            replying_by = el.id;
            v.replying = id;
            return avalon.nextTick(function() {
              var txt;
              txt = $("#slide .reply" + id).ctrl_enter(function() {
                return v.submit(li);
              });
              return txt.focus().select().autosize();
            });
          }
        }
      };
    });
    return model;
  };

}).call(this);
